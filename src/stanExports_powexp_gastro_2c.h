// Generated by rstantools.  Do not edit by hand.

/*
    breathteststan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    breathteststan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with breathteststan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
#ifndef USE_STANC3
#define USE_STANC3
#endif
// Code generated by stanc v2.26.0
#include <stan/model/model_header.hpp>
namespace model_powexp_gastro_2c_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 40, column 2 to column 45)",
                                                      " (in 'string', line 41, column 2 to column 34)",
                                                      " (in 'string', line 42, column 2 to column 25)",
                                                      " (in 'string', line 43, column 2 to column 26)",
                                                      " (in 'string', line 44, column 2 to column 22)",
                                                      " (in 'string', line 45, column 2 to column 32)",
                                                      " (in 'string', line 46, column 2 to column 24)",
                                                      " (in 'string', line 49, column 2 to column 25)",
                                                      " (in 'string', line 50, column 2 to column 53)",
                                                      " (in 'string', line 81, column 2 to column 22)",
                                                      " (in 'string', line 82, column 2 to column 25)",
                                                      " (in 'string', line 83, column 2 to column 24)",
                                                      " (in 'string', line 85, column 2 to column 23)",
                                                      " (in 'string', line 87, column 4 to column 34)",
                                                      " (in 'string', line 88, column 4 to column 32)",
                                                      " (in 'string', line 86, column 23 to line 89, column 3)",
                                                      " (in 'string', line 86, column 2 to line 89, column 3)",
                                                      " (in 'string', line 53, column 2 to column 11)",
                                                      " (in 'string', line 54, column 2 to column 11)",
                                                      " (in 'string', line 55, column 2 to column 13)",
                                                      " (in 'string', line 56, column 2 to column 14)",
                                                      " (in 'string', line 57, column 9 to column 10)",
                                                      " (in 'string', line 57, column 2 to column 15)",
                                                      " (in 'string', line 61, column 2 to column 33)",
                                                      " (in 'string', line 62, column 2 to column 29)",
                                                      " (in 'string', line 63, column 2 to column 25)",
                                                      " (in 'string', line 64, column 2 to column 29)",
                                                      " (in 'string', line 65, column 2 to column 29)",
                                                      " (in 'string', line 66, column 2 to column 33)",
                                                      " (in 'string', line 67, column 2 to column 34)",
                                                      " (in 'string', line 68, column 2 to column 26)",
                                                      " (in 'string', line 70, column 3 to column 19)",
                                                      " (in 'string', line 71, column 3 to column 19)",
                                                      " (in 'string', line 72, column 3 to column 34)",
                                                      " (in 'string', line 73, column 3 to column 32)",
                                                      " (in 'string', line 74, column 3 to column 46)",
                                                      " (in 'string', line 69, column 14 to line 75, column 3)",
                                                      " (in 'string', line 69, column 0 to line 75, column 3)",
                                                      " (in 'string', line 78, column 2 to column 46)",
                                                      " (in 'string', line 12, column 2 to column 11)",
                                                      " (in 'string', line 13, column 2 to column 17)",
                                                      " (in 'string', line 14, column 2 to column 17)",
                                                      " (in 'string', line 15, column 2 to column 24)",
                                                      " (in 'string', line 16, column 13 to column 14)",
                                                      " (in 'string', line 16, column 2 to column 16)",
                                                      " (in 'string', line 17, column 9 to column 10)",
                                                      " (in 'string', line 17, column 2 to column 19)",
                                                      " (in 'string', line 18, column 9 to column 10)",
                                                      " (in 'string', line 18, column 2 to column 19)",
                                                      " (in 'string', line 21, column 4 to column 20)",
                                                      " (in 'string', line 22, column 11 to column 12)",
                                                      " (in 'string', line 22, column 4 to column 23)",
                                                      " (in 'string', line 23, column 4 to column 18)",
                                                      " (in 'string', line 24, column 4 to column 15)",
                                                      " (in 'string', line 25, column 4 to column 17)",
                                                      " (in 'string', line 26, column 4 to column 17)",
                                                      " (in 'string', line 27, column 4 to column 15)",
                                                      " (in 'string', line 28, column 4 to column 17)",
                                                      " (in 'string', line 32, column 8 to column 30)",
                                                      " (in 'string', line 33, column 8 to column 21)",
                                                      " (in 'string', line 31, column 25 to line 34, column 7)",
                                                      " (in 'string', line 31, column 6 to line 34, column 7)",
                                                      " (in 'string', line 30, column 18 to line 35, column 5)",
                                                      " (in 'string', line 30, column 4 to line 35, column 5)",
                                                      " (in 'string', line 36, column 4 to column 23)",
                                                      " (in 'string', line 37, column 4 to column 31)",
                                                      " (in 'string', line 40, column 30 to column 38)",
                                                      " (in 'string', line 46, column 12 to column 20)",
                                                      " (in 'string', line 49, column 9 to column 17)",
                                                      " (in 'string', line 81, column 9 to column 17)",
                                                      " (in 'string', line 82, column 9 to column 17)",
                                                      " (in 'string', line 83, column 9 to column 17)"};
#include <stan_meta_header.hpp>
class model_powexp_gastro_2c final : public model_base_crtp<model_powexp_gastro_2c> {
 private:
  double lkj;
  int student_df;
  int n;
  int n_record;
  std::vector<int> record;
  Eigen::Matrix<double, -1, 1> minute;
  Eigen::Matrix<double, -1, 1> volume;
  Eigen::Matrix<double, -1, 1> zeros;
  Eigen::Matrix<double, -1, 1> volume_1;
  double norm_vol;
  int n_norm;
 
 public:
  ~model_powexp_gastro_2c() { }
  
  inline std::string model_name() const final { return "model_powexp_gastro_2c"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.0", "stancflags = "};
  }
  
  
  model_powexp_gastro_2c(stan::io::var_context& context__,
                         unsigned int random_seed__ = 0,
                         std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_powexp_gastro_2c_namespace::model_powexp_gastro_2c";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 40;
      context__.validate_dims("data initialization","lkj","double",
          context__.to_vec());
      lkj = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 40;
      lkj = context__.vals_r("lkj")[(1 - 1)];
      current_statement__ = 41;
      context__.validate_dims("data initialization","student_df","int",
          context__.to_vec());
      student_df = std::numeric_limits<int>::min();
      
      current_statement__ = 41;
      student_df = context__.vals_i("student_df")[(1 - 1)];
      current_statement__ = 42;
      context__.validate_dims("data initialization","n","int",
          context__.to_vec());
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 42;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 42;
      current_statement__ = 42;
      check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 43;
      context__.validate_dims("data initialization","n_record","int",
          context__.to_vec());
      n_record = std::numeric_limits<int>::min();
      
      current_statement__ = 43;
      n_record = context__.vals_i("n_record")[(1 - 1)];
      current_statement__ = 43;
      current_statement__ = 43;
      check_greater_or_equal(function__, "n_record", n_record, 0);
      current_statement__ = 44;
      validate_non_negative_index("record", "n", n);
      current_statement__ = 45;
      context__.validate_dims("data initialization","record","int",
          context__.to_vec(n));
      record = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 45;
      assign(record, nil_index_list(), context__.vals_i("record"),
        "assigning variable record");
      current_statement__ = 46;
      validate_non_negative_index("minute", "n", n);
      current_statement__ = 47;
      context__.validate_dims("data initialization","minute","double",
          context__.to_vec(n));
      minute = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(minute, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> minute_flat__;
        current_statement__ = 47;
        assign(minute_flat__, nil_index_list(), context__.vals_r("minute"),
          "assigning variable minute_flat__");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 47;
          assign(minute, cons_list(index_uni(sym1__), nil_index_list()),
            minute_flat__[(pos__ - 1)], "assigning variable minute");
          current_statement__ = 47;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 48;
      validate_non_negative_index("volume", "n", n);
      current_statement__ = 49;
      context__.validate_dims("data initialization","volume","double",
          context__.to_vec(n));
      volume = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(volume, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> volume_flat__;
        current_statement__ = 49;
        assign(volume_flat__, nil_index_list(), context__.vals_r("volume"),
          "assigning variable volume_flat__");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 49;
          assign(volume, cons_list(index_uni(sym1__), nil_index_list()),
            volume_flat__[(pos__ - 1)], "assigning variable volume");
          current_statement__ = 49;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 50;
      zeros = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(zeros, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 51;
      validate_non_negative_index("volume_1", "n", n);
      current_statement__ = 52;
      volume_1 = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(volume_1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 53;
      norm_vol = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 54;
      n_norm = std::numeric_limits<int>::min();
      
      current_statement__ = 55;
      assign(zeros, cons_list(index_uni(1), nil_index_list()), 0,
        "assigning variable zeros");
      current_statement__ = 56;
      assign(zeros, cons_list(index_uni(2), nil_index_list()), 0,
        "assigning variable zeros");
      current_statement__ = 57;
      n_norm = 0;
      current_statement__ = 58;
      norm_vol = 0;
      current_statement__ = 64;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 62;
        if (logical_lt(minute[(i - 1)], 5)) {
          current_statement__ = 59;
          norm_vol = (norm_vol + volume[(i - 1)]);
          current_statement__ = 60;
          n_norm = (n_norm + 1);
        } }
      current_statement__ = 65;
      norm_vol = (norm_vol / n_norm);
      current_statement__ = 66;
      assign(volume_1, nil_index_list(), divide(volume, norm_vol),
        "assigning variable volume_1");
      current_statement__ = 67;
      validate_non_negative_index("v0_1", "n_record", n_record);
      current_statement__ = 68;
      validate_non_negative_index("z", "n_record", n_record);
      current_statement__ = 69;
      validate_non_negative_index("cf", "n_record", n_record);
      current_statement__ = 70;
      validate_non_negative_index("v0", "n_record", n_record);
      current_statement__ = 71;
      validate_non_negative_index("tempt", "n_record", n_record);
      current_statement__ = 72;
      validate_non_negative_index("beta", "n_record", n_record);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += n_record;
      num_params_r__ += 2;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += ((2 * (2 - 1)) / 2);
      num_params_r__ += 2 * n_record;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_powexp_gastro_2c_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> v0_1;
      v0_1 = Eigen::Matrix<local_scalar_t__, -1, 1>(n_record);
      stan::math::fill(v0_1, DUMMY_VAR__);
      
      current_statement__ = 1;
      v0_1 = in__.vector(n_record);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(v0_1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(v0_1[(sym1__ - 1)], 0, 2, lp__),
            "assigning variable v0_1");
        } else {
          current_statement__ = 1;
          assign(v0_1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(v0_1[(sym1__ - 1)], 0, 2),
            "assigning variable v0_1");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_record;
      sigma_record = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(sigma_record, DUMMY_VAR__);
      
      current_statement__ = 2;
      sigma_record = in__.vector(2);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(sigma_record,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_record[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma_record");
        } else {
          current_statement__ = 2;
          assign(sigma_record,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_record[(sym1__ - 1)], 0),
            "assigning variable sigma_record");
        }}
      local_scalar_t__ mu_beta;
      mu_beta = DUMMY_VAR__;
      
      current_statement__ = 3;
      mu_beta = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        mu_beta = stan::math::lb_constrain(mu_beta, 0, lp__);
      } else {
        current_statement__ = 3;
        mu_beta = stan::math::lb_constrain(mu_beta, 0);
      }
      local_scalar_t__ mu_tempt;
      mu_tempt = DUMMY_VAR__;
      
      current_statement__ = 4;
      mu_tempt = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        mu_tempt = stan::math::lb_constrain(mu_tempt, 0, lp__);
      } else {
        current_statement__ = 4;
        mu_tempt = stan::math::lb_constrain(mu_tempt, 0);
      }
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 5;
      sigma = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 5;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> L_rho;
      L_rho = Eigen::Matrix<local_scalar_t__, -1, -1>(2, 2);
      stan::math::fill(L_rho, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_rho_in__;
      L_rho_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((2 * (2 - 1)) / 2));
      stan::math::fill(L_rho_in__, DUMMY_VAR__);
      
      current_statement__ = 6;
      L_rho_in__ = in__.vector(((2 * (2 - 1)) / 2));
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        assign(L_rho, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_rho_in__, 2, lp__),
          "assigning variable L_rho");
      } else {
        current_statement__ = 6;
        assign(L_rho, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_rho_in__, 2),
          "assigning variable L_rho");
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> z;
      z = Eigen::Matrix<local_scalar_t__, -1, -1>(2, n_record);
      stan::math::fill(z, DUMMY_VAR__);
      
      current_statement__ = 7;
      z = in__.matrix(2, n_record);
      Eigen::Matrix<local_scalar_t__, -1, -1> cf;
      cf = Eigen::Matrix<local_scalar_t__, -1, -1>(n_record, 2);
      stan::math::fill(cf, DUMMY_VAR__);
      
      current_statement__ = 9;
      assign(cf, nil_index_list(),
        transpose(multiply(diag_pre_multiply(sigma_record, L_rho), z)),
        "assigning variable cf");
      {
        int rec;
        rec = std::numeric_limits<int>::min();
        
        local_scalar_t__ v0r;
        v0r = DUMMY_VAR__;
        
        local_scalar_t__ betar;
        betar = DUMMY_VAR__;
        
        local_scalar_t__ temptr;
        temptr = DUMMY_VAR__;
        
        current_statement__ = 22;
        validate_non_negative_index("mu", "n", n);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu;
        mu = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
        stan::math::fill(mu, DUMMY_VAR__);
        
        current_statement__ = 24;
        lp_accum__.add(lkj_corr_cholesky_lpdf<propto__>(L_rho, lkj));
        current_statement__ = 25;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(z), 0, 1));
        current_statement__ = 26;
        lp_accum__.add(normal_lpdf<propto__>(v0_1, 1, 0.3));
        current_statement__ = 27;
        lp_accum__.add(normal_lpdf<propto__>(mu_beta, 1.2, 0.5));
        current_statement__ = 28;
        lp_accum__.add(normal_lpdf<propto__>(mu_tempt, 100, 50));
        current_statement__ = 29;
        lp_accum__.add(cauchy_lpdf<propto__>(sigma_record[(1 - 1)], 0, 20));
        current_statement__ = 30;
        lp_accum__.add(cauchy_lpdf<propto__>(sigma_record[(2 - 1)], 0, 0.4));
        current_statement__ = 31;
        lp_accum__.add(cauchy_lpdf<propto__>(sigma, 0., 0.5));
        current_statement__ = 38;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 32;
          rec = record[(i - 1)];
          current_statement__ = 33;
          v0r = v0_1[(rec - 1)];
          current_statement__ = 34;
          temptr = (mu_tempt +
                     rvalue(cf,
                       cons_list(index_uni(rec),
                         cons_list(index_uni(1), nil_index_list())), "cf"));
          current_statement__ = 35;
          betar = (mu_beta +
                    rvalue(cf,
                      cons_list(index_uni(rec),
                        cons_list(index_uni(2), nil_index_list())), "cf"));
          current_statement__ = 36;
          assign(mu, cons_list(index_uni(i), nil_index_list()),
            (v0r * stan::math::exp(-pow((minute[(i - 1)] / temptr), betar))),
            "assigning variable mu");}
        current_statement__ = 39;
        lp_accum__.add(
          student_t_lpdf<propto__>(volume_1, student_df, mu, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_powexp_gastro_2c_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> v0_1;
      v0_1 = Eigen::Matrix<double, -1, 1>(n_record);
      stan::math::fill(v0_1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      v0_1 = in__.vector(n_record);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        current_statement__ = 1;
        assign(v0_1, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(v0_1[(sym1__ - 1)], 0, 2),
          "assigning variable v0_1");}
      Eigen::Matrix<double, -1, 1> sigma_record;
      sigma_record = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(sigma_record, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      sigma_record = in__.vector(2);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_record, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_record[(sym1__ - 1)], 0),
          "assigning variable sigma_record");}
      double mu_beta;
      mu_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      mu_beta = in__.scalar();
      current_statement__ = 3;
      mu_beta = stan::math::lb_constrain(mu_beta, 0);
      double mu_tempt;
      mu_tempt = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu_tempt = in__.scalar();
      current_statement__ = 4;
      mu_tempt = stan::math::lb_constrain(mu_tempt, 0);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma = in__.scalar();
      current_statement__ = 5;
      sigma = stan::math::lb_constrain(sigma, 0);
      Eigen::Matrix<double, -1, -1> L_rho;
      L_rho = Eigen::Matrix<double, -1, -1>(2, 2);
      stan::math::fill(L_rho, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_rho_in__;
      L_rho_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((2 * (2 - 1)) / 2));
      stan::math::fill(L_rho_in__, DUMMY_VAR__);
      
      current_statement__ = 6;
      L_rho_in__ = in__.vector(((2 * (2 - 1)) / 2));
      current_statement__ = 6;
      assign(L_rho, nil_index_list(),
        stan::math::cholesky_corr_constrain(L_rho_in__, 2),
        "assigning variable L_rho");
      Eigen::Matrix<double, -1, -1> z;
      z = Eigen::Matrix<double, -1, -1>(2, n_record);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      z = in__.matrix(2, n_record);
      Eigen::Matrix<double, -1, -1> cf;
      cf = Eigen::Matrix<double, -1, -1>(n_record, 2);
      stan::math::fill(cf, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        vars__.emplace_back(v0_1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma_record[(sym1__ - 1)]);}
      vars__.emplace_back(mu_beta);
      vars__.emplace_back(mu_tempt);
      vars__.emplace_back(sigma);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(
            rvalue(L_rho,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "L_rho"));}}
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(
            rvalue(z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "z"));}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 9;
      assign(cf, nil_index_list(),
        transpose(multiply(diag_pre_multiply(sigma_record, L_rho), z)),
        "assigning variable cf");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_record; ++sym2__) {
            vars__.emplace_back(
              rvalue(cf,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "cf"));}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> v0;
      v0 = Eigen::Matrix<double, -1, 1>(n_record);
      stan::math::fill(v0, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> tempt;
      tempt = Eigen::Matrix<double, -1, 1>(n_record);
      stan::math::fill(tempt, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(n_record);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      assign(v0, nil_index_list(), multiply(v0_1, norm_vol),
        "assigning variable v0");
      current_statement__ = 17;
      for (int i = 1; i <= n_record; ++i) {
        current_statement__ = 14;
        assign(tempt, cons_list(index_uni(i), nil_index_list()),
          (mu_tempt +
            rvalue(cf,
              cons_list(index_uni(i),
                cons_list(index_uni(1), nil_index_list())), "cf")),
          "assigning variable tempt");
        current_statement__ = 15;
        assign(beta, cons_list(index_uni(i), nil_index_list()),
          (mu_beta +
            rvalue(cf,
              cons_list(index_uni(i),
                cons_list(index_uni(2), nil_index_list())), "cf")),
          "assigning variable beta");}
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        vars__.emplace_back(v0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        vars__.emplace_back(tempt[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> v0_1;
      v0_1 = Eigen::Matrix<double, -1, 1>(n_record);
      stan::math::fill(v0_1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> v0_1_flat__;
        current_statement__ = 1;
        assign(v0_1_flat__, nil_index_list(), context__.vals_r("v0_1"),
          "assigning variable v0_1_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
          current_statement__ = 1;
          assign(v0_1, cons_list(index_uni(sym1__), nil_index_list()),
            v0_1_flat__[(pos__ - 1)], "assigning variable v0_1");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> v0_1_free__;
      v0_1_free__ = Eigen::Matrix<double, -1, 1>(n_record);
      stan::math::fill(v0_1_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        current_statement__ = 1;
        assign(v0_1_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(v0_1[(sym1__ - 1)], 0, 2),
          "assigning variable v0_1_free__");}
      Eigen::Matrix<double, -1, 1> sigma_record;
      sigma_record = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(sigma_record, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_record_flat__;
        current_statement__ = 2;
        assign(sigma_record_flat__, nil_index_list(),
          context__.vals_r("sigma_record"),
          "assigning variable sigma_record_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 2;
          assign(sigma_record,
            cons_list(index_uni(sym1__), nil_index_list()),
            sigma_record_flat__[(pos__ - 1)],
            "assigning variable sigma_record");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_record_free__;
      sigma_record_free__ = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(sigma_record_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_record_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_record[(sym1__ - 1)], 0),
          "assigning variable sigma_record_free__");}
      double mu_beta;
      mu_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      mu_beta = context__.vals_r("mu_beta")[(1 - 1)];
      double mu_beta_free__;
      mu_beta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      mu_beta_free__ = stan::math::lb_free(mu_beta, 0);
      double mu_tempt;
      mu_tempt = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu_tempt = context__.vals_r("mu_tempt")[(1 - 1)];
      double mu_tempt_free__;
      mu_tempt_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu_tempt_free__ = stan::math::lb_free(mu_tempt, 0);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      Eigen::Matrix<double, -1, -1> L_rho;
      L_rho = Eigen::Matrix<double, -1, -1>(2, 2);
      stan::math::fill(L_rho, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> L_rho_flat__;
        current_statement__ = 6;
        assign(L_rho_flat__, nil_index_list(), context__.vals_r("L_rho"),
          "assigning variable L_rho_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 6;
            assign(L_rho,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              L_rho_flat__[(pos__ - 1)], "assigning variable L_rho");
            current_statement__ = 6;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> L_rho_free__;
      L_rho_free__ = Eigen::Matrix<double, -1, 1>(((2 * (2 - 1)) / 2));
      stan::math::fill(L_rho_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(L_rho_free__, nil_index_list(),
        stan::math::cholesky_corr_free(L_rho),
        "assigning variable L_rho_free__");
      Eigen::Matrix<double, -1, -1> z;
      z = Eigen::Matrix<double, -1, -1>(2, n_record);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 7;
        assign(z_flat__, nil_index_list(), context__.vals_r("z"),
          "assigning variable z_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 7;
            assign(z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              z_flat__[(pos__ - 1)], "assigning variable z");
            current_statement__ = 7;
            pos__ = (pos__ + 1);}}
      }
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        vars__.emplace_back(v0_1_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma_record_free__[(sym1__ - 1)]);}
      vars__.emplace_back(mu_beta_free__);
      vars__.emplace_back(mu_tempt_free__);
      vars__.emplace_back(sigma_free__);
      for (int sym1__ = 1; sym1__ <= ((2 * (2 - 1)) / 2); ++sym1__) {
        vars__.emplace_back(L_rho_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(
            rvalue(z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "z"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("v0_1");
    names__.emplace_back("sigma_record");
    names__.emplace_back("mu_beta");
    names__.emplace_back("mu_tempt");
    names__.emplace_back("sigma");
    names__.emplace_back("L_rho");
    names__.emplace_back("z");
    names__.emplace_back("cf");
    names__.emplace_back("v0");
    names__.emplace_back("tempt");
    names__.emplace_back("beta");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_record)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2),
                                             static_cast<size_t>(n_record)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_record),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_record)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_record)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_record)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "v0_1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_record" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "mu_beta");
    param_names__.emplace_back(std::string() + "mu_tempt");
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L_rho" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_record; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "cf" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "v0" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tempt" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "v0_1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_record" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "mu_beta");
    param_names__.emplace_back(std::string() + "mu_tempt");
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= ((2 * (2 - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L_rho" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_record; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "cf" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "v0" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tempt" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"v0_1\",\"type\":{\"name\":\"vector\",\"length\":" << n_record << "},\"block\":\"parameters\"},{\"name\":\"sigma_record\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_tempt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L_rho\",\"type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << n_record << "},\"block\":\"parameters\"},{\"name\":\"cf\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_record << ",\"cols\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"v0\",\"type\":{\"name\":\"vector\",\"length\":" << n_record << "},\"block\":\"generated_quantities\"},{\"name\":\"tempt\",\"type\":{\"name\":\"vector\",\"length\":" << n_record << "},\"block\":\"generated_quantities\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << n_record << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"v0_1\",\"type\":{\"name\":\"vector\",\"length\":" << n_record << "},\"block\":\"parameters\"},{\"name\":\"sigma_record\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_tempt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L_rho\",\"type\":{\"name\":\"vector\",\"length\":" << ((2 * (2 - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << n_record << "},\"block\":\"parameters\"},{\"name\":\"cf\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_record << ",\"cols\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"v0\",\"type\":{\"name\":\"vector\",\"length\":" << n_record << "},\"block\":\"generated_quantities\"},{\"name\":\"tempt\",\"type\":{\"name\":\"vector\",\"length\":" << n_record << "},\"block\":\"generated_quantities\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << n_record << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_powexp_gastro_2c_namespace::model_powexp_gastro_2c;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_powexp_gastro_2c_namespace::profiles__;
}
#endif
#endif
